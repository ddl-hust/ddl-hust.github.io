<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020年5月19日</title>
    <url>/2020/05/19/2020%E5%B9%B45%E6%9C%8819%E6%97%A5/</url>
    <content><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>hi 我是XXX</p>
]]></content>
  </entry>
  <entry>
    <title>添加标签</title>
    <url>/2020/05/19/%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>IO复用</title>
    <url>/2020/05/19/IO%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<p>以往服务器等待客户端连接需要阻塞accept(),等待客户端发数据需要阻塞，如果同时有多个客户端发起请求，那么就gg,<br>当然可以通过多线程，多进程来解决，但是开销太大。<br>于是就有了IO多路转接，</p>
<a id="more"></a>
<p>其核心思想时服务器通过内核作为媒介来监听客户端的连接请求，内核阻塞去监听客户端状态，一旦其状态变化，内核就通知<br>服务器去处理</p>
<h3 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h3><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><p><code>int select(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@parm1 :nfds 表示所监听的文件描述符最大值+1</span></span><br><span class="line"><span class="comment">// @parm2,3,4 所监听文件描述符事件(可读/可写/异常)</span></span><br><span class="line"><span class="comment">//@parm5:设置超时限制</span></span><br><span class="line"><span class="comment">//返回值&gt;0：监听的所有集合，总满足条件的总数;==0 超时；&lt;0 错误</span></span><br></pre></td></tr></table></figure>
<h4 id="配套操作"><a href="#配套操作" class="headerlink" title="配套操作"></a>配套操作</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>; <span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;<span class="comment">//判断fd是否在集合中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;<span class="comment">//将集合对应位置为1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;<span class="comment">//将集合清0</span></span><br></pre></td></tr></table></figure>
<h4 id="再看文件描述集"><a href="#再看文件描述集" class="headerlink" title="再看文件描述集"></a>再看文件描述集</h4><p>三个文件描述符参数是传入传出参数</p>
<p>举个例子，readfds 监听了{fd1,fd2,fd3,fd4} 对应位图[1111]<br>select返回2，表明有两个文件描述符准备好了,这个时候监听集合可能就变成了[1001] ，因此我们需要轮循才能知道是哪个文件描述符状态发生了改变。</p>
<h4 id="select-详细过程："><a href="#select-详细过程：" class="headerlink" title="select 详细过程："></a>select 详细过程：</h4><ol>
<li><p>当用户 process 调用 select 的时候，select 会将需要监控的 readfds 集合拷贝到内核空间（假设监控的仅仅是 socket 可读），</p>
</li>
<li><p>内核遍历自己监控的 socket sk，挨个调用 sk 的 poll 逻辑以便检查该 sk 是否有可读事件，遍历完所有的 sk 后，如果没有任何一个 sk 可读，那 select 会调用 schedule_timeout 进入 schedule 循环，使得 process 进入睡眠。如果在 timeout 时间内某个 sk 上有数据可读了，或者等待 timeout 了，则调用 select 的 process 会被唤醒，</p>
</li>
<li><p>接下来 select 就是遍历监控的 sk 集合，挨个收集可读事件并返回给用户。</p>
</li>
</ol>
<h4 id="select-缺点"><a href="#select-缺点" class="headerlink" title="select()缺点"></a>select()缺点</h4><ol>
<li>监听的文件描述符上限1024</li>
<li>需要轮循才能知道是哪个文件描述符状态发生了改变，当客户端连接数过多，但是准备就绪的又比较少时，轮循代价比较大</li>
<li>由于监听集合是传入传出参数，因此在调用<code>select()</code>之前需要先保存之前状态</li>
<li>fds集合需要从用户空间拷贝到内核空间的问题，我们希望不需要拷贝</li>
</ol>
<h4 id="select处理完整代码"><a href="#select处理完整代码" class="headerlink" title="select处理完整代码"></a>select处理完整代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd_set rfds;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> listenfd = createSocket(); <span class="comment">//这里封装了，可以简单理解为将socket(),bind(),listen() 都封装了</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 保存所有的文件描述符</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; fdset;</span><br><span class="line">    fdset.insert(listenfd);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FD_ZERO(&amp;rfds);</span><br><span class="line">        <span class="comment">// 每次都要重新设置rfds.因为select返回时，rfds被内核改变，里面只保存了就绪的文件描述符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fd : fdset) FD_SET(fd, &amp;rfds);</span><br><span class="line">        <span class="keyword">int</span> ret = select(*fdset.rbegin()+<span class="number">1</span>, &amp;rfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> fd : fdset) <span class="comment">//这里就是轮询监听的文件描述符集合，因为使用了集合，就不需要从0-fds.size()+1遍历呢</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 有新的连接</span></span><br><span class="line">                <span class="keyword">if</span> (fd == listenfd &amp;&amp; FD_ISSET(fd, &amp;rfds))</span><br><span class="line">                &#123;</span><br><span class="line"> </span><br><span class="line">                   <span class="keyword">int</span> cfd = accept();</span><br><span class="line">                    <span class="comment">// 添加到 fd_set 结构体，并记录到 set</span></span><br><span class="line">                    FD_SET(cfd, &amp;rfds);</span><br><span class="line">                    fdset.insert(cfd); </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//有请求 读数据</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (FD_ISSET(fd, &amp;rfds))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> lenrecv = <span class="number">-1</span>;</span><br><span class="line">                    <span class="built_in">memset</span>(buf, <span class="number">0</span>, BUFSIZE);</span><br><span class="line"> </span><br><span class="line">                    lenrecv = recv(fd, buf, BUFSIZE<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (lenrecv &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == lenrecv)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 客户端退出，删除文件描述符，并关闭</span></span><br><span class="line">                        fdset.erase(fd);</span><br><span class="line">                        FD_CLR(fd, &amp;rfds);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"delete connection fd: %d\n"</span>, fd);</span><br><span class="line">                        <span class="built_in">close</span>(fd);</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">close</span>(listenfd);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p><code>int poll(struct pollfd *fds, unsigned int nfds, int timeout);</code></p>
<p>poll机制和select类似，通过轮询管理的文件描述符，根据其状态来进行处理。</p>
<ol>
<li>但是poll()没有最大文件描述符数量上限。</li>
<li>fds描述方式和select()不同，使用pollfd()基于链表实现，而fd_set()基于数组<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">   <span class="keyword">int</span>   fd;         <span class="comment">/* file descriptor */</span></span><br><span class="line">   short events;     <span class="comment">/* requested events */</span></span><br><span class="line">   short revents;    <span class="comment">/* returned events */</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="poll与select对比"><a href="#poll与select对比" class="headerlink" title="poll与select对比"></a>poll与select对比</h3><h4 id="功能实现上"><a href="#功能实现上" class="headerlink" title="功能实现上"></a>功能实现上</h4><ul>
<li>select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听少于 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 没有描述符数量的限制；</li>
<li>select 会修改描述符，而 poll 不会(请求事件和返回事件分开)</li>
<li>poll 提供了更多的事件类型(POLLIN,POLLOUT,POLLERR,POLLHUP)</li>
</ul>
<h4 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h4><p>select 和 poll 速度都比较慢，每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。</p>
<h4 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h4><p>几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。</p>
<h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>使用场景：连接文件描述符多，但是监听的少，或者说处于就绪态的文件描述符少，使用epoll</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>)</span></span>; <span class="comment">//返回指向内核的红黑树根</span></span><br><span class="line"></span><br><span class="line">int epoll_ctl(int epfd, int op, int fd, struct epoll_event*event)；</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>
<p>epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次(处理红黑树节点时候)，并且进程不需要通过轮询来获得事件完成的描述符。</p>
<blockquote>
<p>为什么不在需要轮循获得准备就绪的fd?<br>因为epoll_wait() 返回的<br><code>struct epoll_event * events</code> 已经包含了就绪的文件描述符,并且该结构体含有fd,以及事件信息<br>常见的处理方式</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">activeEvs</span>[100];</span></span><br><span class="line"><span class="keyword">int</span> n = epoll_wait(efd, activeEvs, kMaxEvents, waitms);<span class="comment">//返回准备就绪的文件描述符个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fd = activeEvs[i].data.fd; <span class="comment">//提取fd</span></span><br><span class="line">        <span class="keyword">int</span> events = activeEvs[i].events; <span class="comment">//提取返回事件</span></span><br><span class="line">        <span class="keyword">if</span> (events &amp; (EPOLLIN | EPOLLERR)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fd == lfd) &#123;</span><br><span class="line">                handleAccept(efd, fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handleRead(efd, fd);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h4 id="LT-amp-amp-ET"><a href="#LT-amp-amp-ET" class="headerlink" title="LT&amp;&amp;ET"></a>LT&amp;&amp;ET</h4><p>Level Triggered (LT) 水平触发</p>
<p>socket接收缓冲区不为空 有数据可读 读事件一直触发</p>
<p>Edge Triggered (ET) 边沿触发</p>
<p>socket的接收缓冲区状态变化时触发读事件，即空的接收缓冲区刚接收到数据时触发读事件</p>
<p>其实就是模拟电路中的上升沿以及水平概念，LT只要有数据就会读，ET只有当缓冲区状态发生改变才会触发。</p>
<p>ET很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>
<h3 id="三种IO复用应用场景"><a href="#三种IO复用应用场景" class="headerlink" title="三种IO复用应用场景"></a>三种IO复用应用场景</h3><h4 id="select-1"><a href="#select-1" class="headerlink" title="select"></a>select</h4><ol>
<li>实时性要求高;select 的 timeout 参数精度为微秒，而 poll 和 epoll 为毫秒，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制</li>
<li>可移植性好</li>
</ol>
<h4 id="poll-1"><a href="#poll-1" class="headerlink" title="poll"></a>poll</h4><p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p>
<h4 id="epoll-1"><a href="#epoll-1" class="headerlink" title="epoll"></a>epoll</h4><p>适用于：</p>
<ul>
<li>只运行在linux</li>
<li>大量的连接，但是只有少数同时处于就绪态，并且这些连接为长连接</li>
</ul>
<p>不适用：</p>
<ul>
<li>监控的描述符状态变化多，而且都是非常短暂的，因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
